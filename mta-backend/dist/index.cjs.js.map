{"version":3,"file":"index.cjs.js","sources":["../src/database/storage.ts","../src/service/router.ts","../src/dynamic/index.ts"],"sourcesContent":["import { resolvePackagePath } from \"@backstage/backend-common\";\nimport { Knex } from 'knex'\nimport { Logger } from \"winston\";\n\nconst ENTITY_APPLICATION_TABLE= 'entity-application-mapping'\nconst OAUTH_MAPPING_TABLE= 'oauth-mapping'\nconst migrationsDir = resolvePackagePath('@internal/plugin-mta-backend', 'migrations')\n\n\nexport interface EntityApplicationStorage {\n    getApplicationIDForEntity(entityUID: string): Promise<string | undefined>\n}\n\nexport class DataBaseEntityApplicationStoraage implements EntityApplicationStorage {\n    public constructor(\n        private readonly knex: Knex<any, any[]>,\n        private readonly logger: Logger\n    ) {}\n\n    static async create(\n        knex: Knex<any, any[]>,\n        logger: Logger,\n      ): Promise<EntityApplicationStorage> {\n        logger.info(\"Starting to migrate database\")\n        await knex.migrate.latest({\n            directory: migrationsDir,\n        });\n\n        return new DataBaseEntityApplicationStoraage(knex, logger)\n      }\n\n    async getApplicationIDForEntity(entityUID: string): Promise<string | undefined> {\n        if (!entityUID) {\n            return undefined;\n        }\n        const daoRaws = await this.knex.table(ENTITY_APPLICATION_TABLE).where(builder => {\n            builder.where('entityUID', entityUID)\n        }).first()\n\n        if (!daoRaws) {\n            return undefined;\n        }\n        const applicationID: string = daoRaws;\n        return applicationID\n    }\n}\n\nexport interface OAuthBackstageIDMapping {\n    // String of success or not??? \n    saveRefreshTokenForUser(backstageID: string, refreshToken: string): Promise<Boolean| undefined>\n    getRefreshTokenForUser(backstageID: string): Promise<String | undefined>\n}\nexport class OAuthBackstageIDMappingStorage implements OAuthBackstageIDMapping{\n    public constructor(\n        private readonly knex: Knex<any, any[]>,\n        private readonly logger: Logger\n    ) {}\n\n    static async create(\n        knex: Knex<any, any[]>,\n        logger: Logger,\n      ): Promise<OAuthBackstageIDMapping> {\n        logger.info(\"Starting to migrate database\")\n        await knex.migrate.latest({\n            directory: migrationsDir,\n        });\n\n        return new OAuthBackstageIDMappingStorage(knex, logger)\n      }\n\n    async saveRefreshTokenForUser(backstageID: string, refreshToken: string): Promise<Boolean| undefined> {\n        if (!backstageID || !refreshToken) {\n            return undefined;\n        }\n        const r= await this.getRefreshTokenForUser(backstageID)\n\n        if (r && r != refreshToken) {\n            const res = await this.knex.table(OAUTH_MAPPING_TABLE).update({\"mtaOAuthRefreshToken\": refreshToken}).where('backstageID', backstageID)\n                .then((data) => {\n                    if (data === 1) {\n                        return true;\n                    }\n                    return false;\n                }\n            );\n            return res \n        }\n\n        const res = this.knex.insert({\"backstageID\": backstageID, \"mtaOAuthRefreshToken\": refreshToken}).into(OAUTH_MAPPING_TABLE)\n            .then((data) => {\n                if (data.length === 1) {\n                    return true\n                }\n                return false;\n            });\n        return res\n    }\n\n    async getRefreshTokenForUser(backstageID: string): Promise<String | undefined> {\n        if (!backstageID)  {\n            return undefined;\n        }   \n\n        const v: string = await this.knex.table(OAUTH_MAPPING_TABLE).where({backstageID: backstageID}).first().then((data) => {\n            if (!data) {\n                return undefined\n            }\n            return data.mtaOAuthRefreshToken\n        })\n        return v\n    }\n}\n","import { errorHandler } from '@backstage/backend-common';\nimport express, { Router } from 'express';\nimport { PluginCacheManager, PluginDatabaseManager } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport { IdentityApi } from '@backstage/plugin-auth-node';\nimport { Logger } from 'winston';\nimport { Issuer } from 'openid-client';\nimport { DataBaseEntityApplicationStoraage, EntityApplicationStorage, OAuthBackstageIDMappingStorage } from '../database/storage';\nimport { generators } from 'openid-client';\n\n\nexport interface RouterOptions {\n  logger: Logger,\n  database: PluginDatabaseManager,\n  config: Config,\n  identity: IdentityApi,\n  cache: PluginCacheManager,\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger, config, database, identity, cache } = options;\n\n  const dbClient = await database.getClient();\n  const entityApplicationStorage  = await DataBaseEntityApplicationStoraage.create(dbClient, logger)\n  const oauthMappingStorage = await OAuthBackstageIDMappingStorage.create(dbClient, logger)\n\n  // Use the cache for short lived access token\n  // Use database mapping for refreshToken\n  const cacheClient = await cache.getClient()\n  \n  // If a user wants to just make a long lived token to always use to MTA auth\n  const mtaToken = config.getOptional('mta.token')\n\n  const fronteEndBaseURL = config.getString('app.baseUrl')\n  const backstageBaseURL = config.getString('backend.baseUrl')\n  const baseUrl = config.getString('mta.url');\n  const baseURLHub = baseUrl+\"/hub\"\n\n  // Set up the oidc provider client\n  const realm = config.getString('mta.auth.realm')\n  const clientID = config.getString('mta.auth.clientID')\n  const secret = config.getString('mta.auth.secret')\n  const baseURLAuth = baseUrl+\"/auth/realms/\"+realm\n  const mtaAuthIssuer = await Issuer.discover(baseURLAuth);\n  const authClient = new mtaAuthIssuer.Client({\n    client_id: 'backstage',\n    client_secret: secret,\n    response_types: ['code'],\n  })\n  const code_verifier = generators.codeVerifier();\n  const code_challenge = generators.codeChallenge(code_verifier);\n\n  const router = Router();\n  router.use(express.json());\n\n  // Need to implemnt an oauth workflow in the future.\n\n  // Need endpoint to get/create Analysis Runs.\n  // There needs to be a config for this, that will be application/plugin wide.\n  // Route to get Application Information (tags/acrhetypes)\n\n\n  // oauth middleware\n  router.use(async (request, response, next) => {\n    if (request.path.includes('/cb') || request.path.includes('/health')) {\n      next();\n      return\n    }\n\n    const backstageID = await identity.getIdentity( { request })\n    let id: string = backstageID?.identity.userEntityRef ?? \"undefined\"\n    \n    const u = new URL(backstageBaseURL+\"/api/mta/cb/\"+id)\n    const org  = request.headers.referer\n    \n    logger.info(\"here2: \" + org)\n    u.searchParams.set(\"continueTo\", request.headers.referer?? fronteEndBaseURL)\n    logger.info(\"here\" + u.toString())\n    \n    let accessToken = await cacheClient.get(String(id))\n    const refreshToken = await oauthMappingStorage.getRefreshTokenForUser(String(id))\n    \n    if (!accessToken && !refreshToken) {\n      const authorizationURL = authClient.authorizationUrl({\n        redirect_uri: u.toString(),\n        code_challenge,\n        code_challenge_method: 'S256',\n      })\n      response.statusCode = 401;\n      response.json({\"loginURL\": authorizationURL})\n      return\n    }\n    if (!accessToken && refreshToken) {\n      const tokenSet = await authClient.refresh(String(refreshToken))\n      if (!tokenSet || !tokenSet.access_token) {\n        const authorizationURL = authClient.authorizationUrl({\n          redirect_uri: u.toString(),\n          code_challenge,\n          code_challenge_method: 'S256',\n        })\n      response.statusCode = 401;\n      response.json({\"loginURL\": authorizationURL})\n        return\n      }\n      logger.info(\"refreshed token\")\n      accessToken = String(tokenSet.access_token)\n      cacheClient.set(String(id), String(tokenSet.access_token), {ttl: tokenSet.expires_in?? 60 * 1000})\n      if (tokenSet.refresh_token && tokenSet.refresh_token != refreshToken) {\n        //if updated, then we should update the database\n        oauthMappingStorage.saveRefreshTokenForUser(String(id), tokenSet.refresh_token)\n      }\n    }\n    \n    \n    response.locals.accessToken = accessToken\n    next();\n  })\n\n  // Routes\n  // Route to test authentication, and health of backend service\n  router.get('/health', async (request, response) => {\n    logger.info('PING!');\n    response.json({ status: 'ok' });\n  });\n\n  router.get('/cb/:username', async (request, response) => {\n    logger.info('PONG!')\n    const user = request.params.username\n    logger.info(\"user in callback:\" +  user)\n    const continueTo = request.query.continueTo\n    const u = new URL(backstageBaseURL+\"/api/mta/cb/\"+user)\n    if (continueTo) {\n      u.searchParams.set(\"continueTo\", continueTo.toString() )\n    }\n    logger.info(\"in callback\" + u.toString())\n    const params = authClient.callbackParams(request);\n    const tokenSet = await authClient.callback(u.toString(), params, { code_verifier });\n    // Store the tokenSet in the cache\n\n    if (!tokenSet.access_token || !tokenSet.refresh_token) {\n      response.status(401)\n      response.json({})\n      return\n    }\n\n    // Default expire to 1min\n    cacheClient.set(user, tokenSet.access_token, {ttl: tokenSet.expires_in ?? 60 * 1000})\n    const out = oauthMappingStorage.saveRefreshTokenForUser(user, tokenSet.refresh_token)\n    response.redirect(continueTo?.toString() ?? fronteEndBaseURL)\n    return\n\n  })\n\n  router.get('/applications', async(request, response) => {\n    const getResponse = fetch(baseURLHub+\"/applications\", {\n      \"credentials\": \"include\",\n      \"headers\": {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Authorization\": \"Bearer \" + response.locals.accessToken, \n      },\n      \"method\": \"GET\",\n    })\n\n    const status = await (await getResponse).status\n    if (status != 200) {\n      response.status(status)\n      response.json({ \"status\": status})\n      return\n    }\n    const j = await (await getResponse).json()\n    response.json(j)\n  })\n\n  router.get('/applications/:id', async(request, response) => {\n    const getResponse = fetch(baseURLHub+\"/applications/\"+request.params.id, {\n      \"credentials\": \"include\",\n      \"headers\": {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Authorization\": \"Bearer \" + response.locals.accessToken, \n      },\n      \"method\": \"GET\",\n    })\n\n    const status = await (await getResponse).status\n    if (status != 200) {\n      response.status(status)\n      response.json({ \"status\": status})\n      return\n    }\n    const j = await (await getResponse).json()\n    response.json(j)\n\n  })\n\n  router.get('/issues/:id', async(request, response) => {\n    const getResponse = fetch(baseURLHub+\"/applications/\"+request.params.id+\"/analysis/issues\", {\n      \"credentials\": \"include\",\n      \"headers\": {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Authorization\": \"Bearer \" + response.locals.accessToken, \n      },\n      \"method\": \"GET\",\n    })\n\n    const status = await (await getResponse).status\n    if (status != 200) {\n      logger.error(\"resposne does not make sense %s\", getResponse)\n      response.status(status)\n      response.json({ \"status\": status})\n      return\n    }\n    const j = await (await getResponse).json()\n    response.json(j)\n  })\n\n  \n\n\n  router.use(errorHandler());\n  return router;\n}\n","import { BackendDynamicPluginInstaller } from '@janus-idp/backend-plugin-manager';\n\nimport { createRouter } from '../service/router';\n\nexport const dynamicPluginInstaller: BackendDynamicPluginInstaller = {\n  kind: 'legacy',\n  router: {\n    pluginID: \"mta\",\n    createPlugin: createRouter \n  },\n};"],"names":["resolvePackagePath","res","Issuer","generators","Router","express","errorHandler"],"mappings":"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"}