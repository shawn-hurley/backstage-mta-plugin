import { EventBroker, EventPublisher, EventSubscriber, HttpPostIngressOptions, EventParams } from '@backstage/plugin-events-node';
import { Logger } from 'winston';
import { Config } from '@backstage/config';
import express from 'express';

/**
 * A builder that helps wire up all component parts of the event management.
 *
 * @public
 */
declare class EventsBackend {
    private eventBroker;
    private publishers;
    private subscribers;
    constructor(logger: Logger);
    setEventBroker(eventBroker: EventBroker): EventsBackend;
    addPublishers(...publishers: Array<EventPublisher | Array<EventPublisher>>): EventsBackend;
    addSubscribers(...subscribers: Array<EventSubscriber | Array<EventSubscriber>>): EventsBackend;
    /**
     * Wires up and returns all component parts of the event management.
     */
    start(): Promise<void>;
}

/**
 * Publishes events received from their origin (e.g., webhook events from an SCM system)
 * via HTTP POST endpoint and passes the request body as event payload to the registered subscribers.
 *
 * @public
 */
declare class HttpPostIngressEventPublisher implements EventPublisher {
    private readonly logger;
    private readonly ingresses;
    private eventBroker?;
    static fromConfig(env: {
        config: Config;
        ingresses?: {
            [topic: string]: Omit<HttpPostIngressOptions, 'topic'>;
        };
        logger: Logger;
    }): HttpPostIngressEventPublisher;
    private constructor();
    bind(router: express.Router): void;
    setEventBroker(eventBroker: EventBroker): Promise<void>;
    private createRouter;
    private addRouteForTopic;
}

/**
 * In process event broker which will pass the event to all registered subscribers
 * interested in it.
 * Events will not be persisted in any form.
 *
 * @public
 */
declare class DefaultEventBroker implements EventBroker {
    private readonly logger;
    constructor(logger: Logger);
    private readonly subscribers;
    publish(params: EventParams): Promise<void>;
    subscribe(...subscribers: Array<EventSubscriber | Array<EventSubscriber>>): void;
}

export { DefaultEventBroker, EventsBackend, HttpPostIngressEventPublisher };
