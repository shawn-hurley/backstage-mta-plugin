{"version":3,"file":"HttpPostIngressEventPublisher-6e928c08.cjs.js","sources":["../../src/service/DefaultEventBroker.ts","../../src/service/http/validation/RequestValidationContextImpl.ts","../../src/service/http/HttpPostIngressEventPublisher.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EventBroker,\n  EventParams,\n  EventSubscriber,\n} from '@backstage/plugin-events-node';\nimport { Logger } from 'winston';\n\n/**\n * In process event broker which will pass the event to all registered subscribers\n * interested in it.\n * Events will not be persisted in any form.\n *\n * @public\n */\n// TODO(pjungermann): add prom metrics? (see plugins/catalog-backend/src/util/metrics.ts, etc.)\nexport class DefaultEventBroker implements EventBroker {\n  constructor(private readonly logger: Logger) {}\n\n  private readonly subscribers: {\n    [topic: string]: EventSubscriber[];\n  } = {};\n\n  async publish(params: EventParams): Promise<void> {\n    this.logger.debug(\n      `Event received: topic=${params.topic}, metadata=${JSON.stringify(\n        params.metadata,\n      )}, payload=${JSON.stringify(params.eventPayload)}`,\n    );\n\n    const subscribed = this.subscribers[params.topic] ?? [];\n    await Promise.all(\n      subscribed.map(async subscriber => {\n        try {\n          await subscriber.onEvent(params);\n        } catch (error) {\n          this.logger.error(\n            `Subscriber \"${subscriber.constructor.name}\" failed to process event`,\n            error,\n          );\n        }\n      }),\n    );\n  }\n\n  subscribe(\n    ...subscribers: Array<EventSubscriber | Array<EventSubscriber>>\n  ): void {\n    subscribers.flat().forEach(subscriber => {\n      subscriber.supportsEventTopics().forEach(topic => {\n        this.subscribers[topic] = this.subscribers[topic] ?? [];\n        this.subscribers[topic].push(subscriber);\n      });\n    });\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RequestRejectionDetails,\n  RequestValidationContext,\n} from '@backstage/plugin-events-node';\n\nexport class RequestValidationContextImpl implements RequestValidationContext {\n  #rejectionDetails: RequestRejectionDetails | undefined;\n\n  reject(details?: Partial<RequestRejectionDetails>): void {\n    this.#rejectionDetails = {\n      status: details?.status ?? 403,\n      payload: details?.payload ?? {},\n    };\n  }\n\n  wasRejected(): boolean {\n    return this.#rejectionDetails !== undefined;\n  }\n\n  get rejectionDetails() {\n    return this.#rejectionDetails;\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport { Config } from '@backstage/config';\nimport {\n  EventBroker,\n  EventPublisher,\n  HttpPostIngressOptions,\n  RequestValidator,\n} from '@backstage/plugin-events-node';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\nimport { RequestValidationContextImpl } from './validation';\n\n/**\n * Publishes events received from their origin (e.g., webhook events from an SCM system)\n * via HTTP POST endpoint and passes the request body as event payload to the registered subscribers.\n *\n * @public\n */\n// TODO(pjungermann): add prom metrics? (see plugins/catalog-backend/src/util/metrics.ts, etc.)\nexport class HttpPostIngressEventPublisher implements EventPublisher {\n  private eventBroker?: EventBroker;\n\n  static fromConfig(env: {\n    config: Config;\n    ingresses?: { [topic: string]: Omit<HttpPostIngressOptions, 'topic'> };\n    logger: Logger;\n  }): HttpPostIngressEventPublisher {\n    const topics =\n      env.config.getOptionalStringArray('events.http.topics') ?? [];\n\n    const ingresses = env.ingresses ?? {};\n    topics.forEach(topic => {\n      // don't overwrite topic settings\n      // (e.g., added at the config as well as argument)\n      if (!ingresses[topic]) {\n        ingresses[topic] = {};\n      }\n    });\n\n    return new HttpPostIngressEventPublisher(env.logger, ingresses);\n  }\n\n  private constructor(\n    private readonly logger: Logger,\n    private readonly ingresses: {\n      [topic: string]: Omit<HttpPostIngressOptions, 'topic'>;\n    },\n  ) {}\n\n  bind(router: express.Router): void {\n    router.use('/http', this.createRouter(this.ingresses));\n  }\n\n  async setEventBroker(eventBroker: EventBroker): Promise<void> {\n    this.eventBroker = eventBroker;\n  }\n\n  private createRouter(ingresses: {\n    [topic: string]: Omit<HttpPostIngressOptions, 'topic'>;\n  }): express.Router {\n    const router = Router();\n    router.use(express.json());\n\n    Object.keys(ingresses).forEach(topic =>\n      this.addRouteForTopic(router, topic, ingresses[topic].validator),\n    );\n\n    router.use(errorHandler());\n    return router;\n  }\n\n  private addRouteForTopic(\n    router: express.Router,\n    topic: string,\n    validator?: RequestValidator,\n  ): void {\n    const path = `/${topic}`;\n\n    router.post(path, async (request, response) => {\n      const requestDetails = {\n        body: request.body,\n        headers: request.headers,\n      };\n      const context = new RequestValidationContextImpl();\n      await validator?.(requestDetails, context);\n      if (context.wasRejected()) {\n        response\n          .status(context.rejectionDetails!.status)\n          .json(context.rejectionDetails!.payload);\n        return;\n      }\n\n      const eventPayload = request.body;\n      await this.eventBroker!.publish({\n        topic,\n        eventPayload,\n        metadata: request.headers,\n      });\n\n      response.status(202).json({ status: 'accepted' });\n    });\n\n    // TODO(pjungermann): We don't really know the externally defined path prefix here,\n    //  however it is more useful for users to have it. Is there a better way?\n    this.logger.info(`Registered /api/events/http${path} to receive events`);\n  }\n}\n"],"names":["__publicField","Router","express","errorHandler"],"mappings":"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"}