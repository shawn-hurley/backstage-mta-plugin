'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var alpha = require('@backstage/plugin-events-node/alpha');
var HttpPostIngressEventPublisher = require('./cjs/HttpPostIngressEventPublisher-6e928c08.cjs.js');
var Router = require('express-promise-router');
require('express');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Router__default = /*#__PURE__*/_interopDefaultLegacy(Router);

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _eventBroker, _httpPostIngresses, _publishers, _subscribers;
class EventsExtensionPointImpl {
  constructor() {
    __privateAdd(this, _eventBroker, void 0);
    __privateAdd(this, _httpPostIngresses, []);
    __privateAdd(this, _publishers, []);
    __privateAdd(this, _subscribers, []);
  }
  setEventBroker(eventBroker) {
    __privateSet(this, _eventBroker, eventBroker);
  }
  addPublishers(...publishers) {
    __privateGet(this, _publishers).push(...publishers.flat());
  }
  addSubscribers(...subscribers) {
    __privateGet(this, _subscribers).push(...subscribers.flat());
  }
  addHttpPostIngress(options) {
    __privateGet(this, _httpPostIngresses).push(options);
  }
  get eventBroker() {
    return __privateGet(this, _eventBroker);
  }
  get publishers() {
    return __privateGet(this, _publishers);
  }
  get subscribers() {
    return __privateGet(this, _subscribers);
  }
  get httpPostIngresses() {
    return __privateGet(this, _httpPostIngresses);
  }
}
_eventBroker = new WeakMap();
_httpPostIngresses = new WeakMap();
_publishers = new WeakMap();
_subscribers = new WeakMap();
const eventsPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "events",
  register(env) {
    const extensionPoint = new EventsExtensionPointImpl();
    env.registerExtensionPoint(alpha.eventsExtensionPoint, extensionPoint);
    env.registerInit({
      deps: {
        config: backendPluginApi.coreServices.rootConfig,
        logger: backendPluginApi.coreServices.logger,
        router: backendPluginApi.coreServices.httpRouter
      },
      async init({ config, logger, router }) {
        var _a;
        const winstonLogger = backendCommon.loggerToWinstonLogger(logger);
        const ingresses = Object.fromEntries(
          extensionPoint.httpPostIngresses.map((ingress) => [
            ingress.topic,
            ingress
          ])
        );
        const http = HttpPostIngressEventPublisher.HttpPostIngressEventPublisher.fromConfig({
          config,
          ingresses,
          logger: winstonLogger
        });
        const eventsRouter = Router__default["default"]();
        http.bind(eventsRouter);
        router.use(eventsRouter);
        const eventBroker = (_a = extensionPoint.eventBroker) != null ? _a : new HttpPostIngressEventPublisher.DefaultEventBroker(winstonLogger);
        eventBroker.subscribe(extensionPoint.subscribers);
        [extensionPoint.publishers, http].flat().forEach((publisher) => publisher.setEventBroker(eventBroker));
      }
    });
  }
});

exports["default"] = eventsPlugin;
//# sourceMappingURL=alpha.cjs.js.map
